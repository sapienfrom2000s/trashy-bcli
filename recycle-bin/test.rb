require 'socketry'


peer_data = "\xB2PK\xC4\x1A\xE1\xD4\x05\x8E\x9B\x1A\xE1[f\xB4\xBE\x1A\xE1\x92F\xBA\xCC\xA9\xD8\xB0O\x9A\xDC\x1A\xE1\xB1!Rq\x1A\xE11\x90\xA2\x0E\xC9xs\xBC\xF5\xD2\xBDOV~\xCB\xF1NdB\xEA:\x8A\r\x05%\xE4\xCA\x14\x1A\xE1\xB4\xBE\xDA\e\xC7C\x92F\xC6&\xC8\xD5\x92F\xADecd\x81z\x80I\xC8\xD5`(!\xBD\x1A\xE1I\x91\xF2*V\xB5\xCB\xBD\x8C\x11\x1A\xE1}\xA8\xF4\xBC\x1A\xE1i\xE9\xF2_k\xA2VW'MI\x86\xDD\xEDU\x1E\x1A8\xC0\x91u\xF4\x04\x11\xAD\xB7,QL\x02\x8B/p*\x1A\xE1T\xEF\x06\x8F\x85\xC2E\xF8.\x1C\xC0\b\xCB\xDB\xB0lKQ\xB2v\xEC/\x1A\xE1\xB1\e\xCA\xFA\xA3\xEBU\xBFX^ \xF4T4\x9B\xD0\x1A\xE1\xD8\xC5\xA93\xAB\xC9\xB2\xA2\xAE\aN&z\xAF\xCA\xD2n\xFAOV3J\x1A\xE1-+\x13\x1D\xE1\xD4)\xD6\x1A\x89\x1A\xE1\x029\xA8\xEF\x1A\xE1\xA1&\xD8\x02\x1A\xE1}\xFDn<\xC7\xF1g\xF2\xC6\xE5\x86\xB2V\x99\xF9Y\x1A\xE1.\x98<e\xB8\xCD\xB9\xDA\x7Fm\xC8\xD4\x97_\xAEN\x8F\xCAgQ\x1D\f\x91\x19S\x1CL\xF8U\xE3%\xBD\xFF\x18A\xF1\xBA\xB3\xC0{\xCE\x94"


peer_data.bytes.each_slice(6) do |ip_data|
  ip = "#{ip_data[3]}.#{ip_data[2]}.#{ip_data[1]}.#{ip_data[0]}"
  port = ip_data[4] * 256 + ip_data[5]
  puts "Trying to connect to #{ip} #{port}"
  begin
  tcp_socket = Socketry::TCP::Socket.connect(ip , 80)
  rescue
    next
  end
end



